# Please ensure that atleast one of ["secretBinding","k8sSecret"] are filled. 
# SLV may not work as expected without a secret key or binding specified.

# The secretBinding String
secretBinding: ""

# The name of the secret in the Kubernetes cluster that contains the secretKey or the secretBinding. 
# The secretKey is to be put inside the key name "SecretKey".
# (or)
# The secretBinding is to be put inside the key name "SecretBinding". 
# Ensure that this exists in the same namespace as the release namespace.
k8sSecret: ""

# The image with tag to be used for SLV
# You must ensure that the tag that you use is the same as Chart.Version
# Otherwise, helm will throw an error.
image: ""

# Setting resource constraints for the operator.
resource:
  limits:
    cpu: ""
    memory: ""
  requests:
    cpu: ""
    memory: ""

# The labels to be set for the Deployment/CronJob/Job
labels: {}

# The pod Labels to be set for SLV pods.
podLabels: {}

# The pod Annotations to be set for SLV pods.
podAnnotations: {}

# The nodeSelector to be set for SLV pods.
nodeSelector: {}

# The affinity to be set for SLV pods.
affinity: {}

# The tolerations to be set for SLV pods.
tolerations: []

# Environment variables to be set for the SLV operator.
# Cannot override existing environment variables.
# E.g. - name: AWS_ROLE_ARN
#        value: "arn:aws:iam::123456789012:role/slv-role"
#      - name: SOME_ENV_VAR
#        value: "some-value"
env: {}

# Configuration for the ServiceAccount labels and annotations
serviceAccount:
  # Labels to be added to the ServiceAccount
  # Example:
  # labels:
  #   app.kubernetes.io/name: slv
  #   app.kubernetes.io/instance: slv
  labels: {}

  # Annotations to be added to the ServiceAccount
  # Example:
  # annotations:
  #   eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/slv-role
  annotations: {}

# The volumes to be used inside the SLV pods. 
# You may need this when you are using cert-manager to inject CA certs into the SLV pods.
# E.g. - name: cert
#        secret:
#        secretName: slv-webhook-server-cert
volumes: []


# The volume mounts to be mounted inside the SLV pods.
# You may need this when you are using cert-manager to inject CA certs into the SLV pods.
# E.g. - name: cert
#        mountPath: /tmp/k8s-webhook-server/serving-certs
#        readOnly: true
volumeMounts: []

# The number of replicas to be used by the deployment for SLV pods. 
replicas: 1


webhook:
  
  # If set to false (left as it is), slv will automatically create TLS certificates for the webhook and set up the configuration. 
  # If set to true, you will have to create the TLS certificates and set up the configuration manually. You can
  # - Use .Values.operator.volumes and .Values.operator.volumeMounts to mount the TLS certificates inside the SLV pods.
  # - Use .Values.webhook.vwhAnnotations to set up ca injection (If using cert-manager)
  # Default: false
  disableAutomaticCertManagement: false

  # The name of the service that routes to the webhook server
  # Default: slv-webhook-service
  serviceName: ""
  
  # Name of the Secret where TLS certs will be stored for SLV webhook
  # Default: slv-webhook-server-cert
  certSecretName: ""
  
  # Name of the ValidatingWebhookConfiguration for SLV webhook
  # Default: slv-operator-validating-webhook
  validatingWebhookConfigName: ""

  # Annotations to add to the validatingWebhookConfiguration
  # E.g. cert-manager.io/inject-ca-from-secret: "slv-webhook-server-cert"
  validatingWebhookConfigAnnotations: {}




